In this section we will show you how to get started with Serenity BDD using a simple project using http://junit.org[JUnit] and http://gradle.org[Gradle].

Serenity BDD projects can be built using Gradle, http://maven.apache.org[Maven] or https://ant.apache.org[Ant]. Configuring a Java or http://groovy.codehaus.org[Groovy] build to use Serenity BDD is generally just a matter of adding the right dependencies, and a task or plugin to generate the aggregated reports. 

For example, a simple Gradle build for a Serenity BDD project could look like this:

[source,groovy]
----
include::{srcdir}/junit-quick-start/build.gradle[tags=simple]
----

<1> Add the Serenity plugin to the Gradle build path
<2> Adds the 'aggregate' and 'check' tasks to the Gradle build
<3> The core Serenity BDD classes
<4> The Serenity BDD JUnit integration

Next, you would write a JUnit test to express the acceptance criteria that you want to automate. Suppose you are working on a Frequent Flyer website for an airline. You are implementing the feature that lets Frequent Flyer members earn points when they travel. The first acceptance criteria you need to cater for is the following:
   - Frequent Flyer members earn 100 points for every 1000 km travelled.

Using Serenity BDD, you could write a unit test like the following:

[source,java]
----
include::{srcdir}/junit-quick-start/src/test/java/net/serenitybdd/samples/junit/features/earning_points/WhenCalculatingFrequentFlyerPoints.java[tags=testcase]
----
<1> You run the JUnit test using the 'Serenity' test runner
<2> The `@Steps` annotation marks a Serenity step library
<3> The unit test is composed of logical steps, each of which will appear in the reports

When you write acceptance tests this way, the JUnit test mainly orchestrates the order of the steps: the bulk of the testing logic goes in the step library methods themselves.

[source,java]
----
include::{srcdir}/junit-quick-start/src/test/java/net/serenitybdd/samples/junit/steps/TravellerSteps.java[tags=classbody]
----
<1> This is the object under test.
<2> The `@Step` annotation marks this as a method that will be recorded and will appear in the test report
<3> Prepare the test data
<4> The action under test
<5> Check the outcome

Note that, at this point, the `FrequentFlyer` class and the `flies()` method may not exist: you are using the acceptance test implementation to discover the services you need from your application code. This is very typical of a BDD/TDD approach to writing software, and as a result the acceptance tests not only test the application, they also illustrate how the application code is meant to work.

These tests would initially fail, because the `FrequentFlyer.flies()` method hasn't been written. But once you have correctly implemented this method, you can run the tests and generate the reports from the command line like this: 

[source,bash]
----
$ gradle clean test aggregate
----

This will produce a report like the one below in the `target/site/thucydides` directory.

[[fig-test-report]]
.The `@Step` methods appear as lines in the test report
image::first-steps-test-report.png[]
